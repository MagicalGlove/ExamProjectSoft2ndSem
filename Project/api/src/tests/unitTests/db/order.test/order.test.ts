import { AppDataSource } from '../../../../ormconfig.ts';
import * as orderAndFeedbackService from '../../../../monolithOrderAndFeedback/OrderAndFeedbackService.ts';
import { ObjectId } from 'mongodb';
import { getAllOrdersMockOrder1, getAllOrdersMockOrder2 } from '../../../mocks/orderMocksDB.ts';
import { Order } from '../../../../monolithOrderAndFeedback/Order.ts';

describe('Database Functionality for createFeedbackAndLinkOrder', () => {
    beforeAll(async () => {
        await AppDataSource.initialize();
    });

    beforeEach(async () => {
        // Declare the variables once
        let customerID, restaurantID, address, totalPrice, orderItemList, timestamp;

        // Assign values from getAllOrdersMockOrder1
        ({ customerID, restaurantID, orderItemList, address, totalPrice, timestamp } = getAllOrdersMockOrder1);

        await orderAndFeedbackService.createOrder(
            customerID,
            restaurantID,
            orderItemList,
            address,
            totalPrice,
            timestamp
        );

        // Assign values from getAllOrdersMockOrder2
        ({ customerID, restaurantID, orderItemList, address, totalPrice, timestamp } = getAllOrdersMockOrder2);

        await orderAndFeedbackService.createOrder(
            customerID,
            restaurantID,
            orderItemList,
            address,
            totalPrice,
            timestamp
        );
    });

    afterEach(async () => {
        const repository = AppDataSource.getRepository(Order);
        await repository.delete({}); //Deletes all documents in the collection
    });

    afterAll(async () => {
        await AppDataSource.destroy();
    });

    it('should create order', async () => {
        const mockOrder = {
            _id: new ObjectId('673de997fa60e0a917658708'),
            customerID: new ObjectId('672df427f54107237ff75565'),
            restaurantID: new ObjectId('672de88ff54107237ff75565'),
            address: new ObjectId('672df723f54107237ff75573'),
            totalPrice: 50,
            orderItemList: [
                {
                    menuItemId: new ObjectId('672de8c4f54107237ff75546'),
                    quantity: 2,
                },
                {
                    menuItemId: new ObjectId('672de8c4f54107237ff75547'),
                    quantity: 3,
                },
                {
                    menuItemId: new ObjectId('672de8c4f54107237ff75548'),
                    quantity: 1,
                },
            ],
            timestamp: new Date('2024-11-20T12:00:00.000Z'),
            employeeID: null,
            feedbackID: null,
        };

        const order = await orderAndFeedbackService.createOrder(
            mockOrder.customerID,
            mockOrder.restaurantID,
            mockOrder.orderItemList,
            mockOrder.address,
            mockOrder.totalPrice,
            mockOrder.timestamp
        );

        if (!order) {
            throw new Error('Order creation failed, cannot proceed with feedback creation');
        }

        const orderData = {
            _id: new ObjectId('673de997fa60e0a917658708'),
            customerID: new ObjectId('672df427f54107237ff75565'),
            restaurantID: new ObjectId('672de88ff54107237ff75565'),
            address: new ObjectId('672df723f54107237ff75573'),
            totalPrice: 50,
            orderItemList: [
                {
                    menuItemId: new ObjectId('672de8c4f54107237ff75546'),
                    quantity: 2,
                },
                {
                    menuItemId: new ObjectId('672de8c4f54107237ff75547'),
                    quantity: 3,
                },
                {
                    menuItemId: new ObjectId('672de8c4f54107237ff75548'),
                    quantity: 1,
                },
            ],
            timestamp: new Date('2024-11-20T12:00:00.000Z'),
            employeeID: null,
            feedbackID: null,
        };

        expect(order).not.toBeNull();
        expect(order.timestamp).toStrictEqual(orderData.timestamp);
        expect(order.totalPrice).toBe(orderData.totalPrice);
        expect(order.orderItemList).toStrictEqual(orderData.orderItemList);
    });

    it('should get all orders', async () => {
        const orders = await orderAndFeedbackService.getAllOrders();

        expect(orders).not.toBeNull();

        // Match only the necessary properties
        expect(orders).toEqual(
            expect.arrayContaining([
                expect.objectContaining({
                    _id: expect.any(Object), // If the ID is autogenerated
                    customerID: getAllOrdersMockOrder1.customerID,
                    restaurantID: getAllOrdersMockOrder1.restaurantID,
                    address: getAllOrdersMockOrder1.address,
                    totalPrice: getAllOrdersMockOrder1.totalPrice,
                    orderItemList: getAllOrdersMockOrder1.orderItemList,
                    timestamp: getAllOrdersMockOrder1.timestamp,
                }),
                expect.objectContaining({
                    _id: expect.any(Object),
                    customerID: getAllOrdersMockOrder2.customerID,
                    restaurantID: getAllOrdersMockOrder2.restaurantID,
                    address: getAllOrdersMockOrder2.address,
                    totalPrice: getAllOrdersMockOrder2.totalPrice,
                    orderItemList: getAllOrdersMockOrder2.orderItemList,
                    timestamp: getAllOrdersMockOrder2.timestamp,
                }),
            ])
        );
    });
});
