import { AppDataSource } from '../../../../ormconfig.ts';
import * as orderAndFeedbackService from '../../../../monolithOrderAndFeedback/OrderAndFeedbackService.ts';
import { getAllOrdersMockOrder1, getAllOrdersMockOrder2, mockOrderCreate } from '../../../mocks/orderMocksDB.ts';
import { Order } from '../../../../monolithOrderAndFeedback/Order.ts';
import { createOrders, createOrders2 } from '../../../utilities.ts';

describe('Database Functionality for createFeedbackAndLinkOrder', () => {
    beforeAll(async () => {
        await AppDataSource.initialize();
    });

    beforeEach(async () => {
        await createOrders();
        await createOrders2();
    });

    afterEach(async () => {
        const repository = AppDataSource.getRepository(Order);
        await repository.delete({}); //Deletes all documents in the collection
    });

    afterAll(async () => {
        await AppDataSource.destroy();
    });

    it('should create order', async () => {
        const mockOrder = mockOrderCreate;

        const order = await orderAndFeedbackService.createOrder(
            mockOrder.customerID,
            mockOrder.restaurantID,
            mockOrder.orderItemList,
            mockOrder.address,
            mockOrder.totalPrice,
            mockOrder.timestamp
        );

        if (!order) {
            throw new Error('Order creation failed, cannot proceed with feedback creation');
        }

        expect(order).not.toBeNull();
        expect(order.timestamp).toStrictEqual(mockOrder.timestamp);
        expect(order.totalPrice).toBe(mockOrder.totalPrice);
        expect(order.orderItemList).toStrictEqual(mockOrder.orderItemList);
    });

    it('should get all orders', async () => {
        const orders = await orderAndFeedbackService.getAllOrders();

        expect(orders).not.toBeNull();

        // Match only the necessary properties
        expect(orders).toEqual(
            expect.arrayContaining([
                expect.objectContaining({
                    _id: expect.any(Object), // If the ID is autogenerated
                    customerID: getAllOrdersMockOrder1.customerID,
                    restaurantID: getAllOrdersMockOrder1.restaurantID,
                    address: getAllOrdersMockOrder1.address,
                    totalPrice: getAllOrdersMockOrder1.totalPrice,
                    orderItemList: getAllOrdersMockOrder1.orderItemList,
                    timestamp: getAllOrdersMockOrder1.timestamp,
                }),
                expect.objectContaining({
                    _id: expect.any(Object),
                    customerID: getAllOrdersMockOrder2.customerID,
                    restaurantID: getAllOrdersMockOrder2.restaurantID,
                    address: getAllOrdersMockOrder2.address,
                    totalPrice: getAllOrdersMockOrder2.totalPrice,
                    orderItemList: getAllOrdersMockOrder2.orderItemList,
                    timestamp: getAllOrdersMockOrder2.timestamp,
                }),
            ])
        );
    });
});
